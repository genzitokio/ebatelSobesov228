import asyncio
import json
import logging
import threading
import time
import os
import sys
import psutil
import keyboard
from typing import Set, Optional
import websockets
from colorama import init, Fore, Style

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è Windows
init()

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import config
from ai_responder import AIResponder
from speech_processor import SpeechProcessor, MockSpeechProcessor

logging.basicConfig(
    level=logging.INFO,
    format=f'{Fore.CYAN}%(asctime)s{Style.RESET_ALL} - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class StealthAssistant:
    def __init__(self):
        self.clients: Set[websockets.WebSocketServerProtocol] = set()
        self.ai_responder = AIResponder()
        self.speech_processor = None
        self.is_running = False
        self.server = None
        self.security_monitor = None
        self.loop = None
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ä–µ—á–∏
        try:
            self.speech_processor = SpeechProcessor()
            logger.info(f"üé§ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π SpeechProcessor")
        except Exception as e:
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ä–µ—á–∏: {e}")
            logger.info("üé≠ –ò—Å–ø–æ–ª—å–∑—É–µ–º mock –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            self.speech_processor = MockSpeechProcessor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        processor_type = type(self.speech_processor).__name__
        logger.info(f"üîß –¢–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {processor_type}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—á–∏
        self.speech_processor.set_text_callback(self._on_speech_recognized_sync)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º kill-switch
        self._setup_kill_switch()
    
    def _setup_kill_switch(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π kill-switch"""
        try:
            keyboard.add_hotkey(
                config.KILL_SWITCH_HOTKEY,
                self._emergency_shutdown,
                suppress=True
            )
            logger.info(f"Kill-switch –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {config.KILL_SWITCH_HOTKEY}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ kill-switch: {e}")
    
    def _emergency_shutdown(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ"""
        logger.warning("üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –í–´–ö–õ–Æ–ß–ï–ù–ò–ï!")
        self.shutdown()
        sys.exit(0)
    
    def _on_speech_recognized_sync(self, text: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—á–∏"""
        logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –∏–∑ SpeechProcessor: '{text}'")
        
        if self.loop and self.loop.is_running():
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π
            logger.info(f"üîÑ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π event loop")
            asyncio.run_coroutine_threadsafe(
                self._on_speech_recognized(text),
                self.loop
            )
        else:
            # –ï—Å–ª–∏ —Ü–∏–∫–ª –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª
            logger.info(f"üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π event loop")
            asyncio.run(self._on_speech_recognized(text))
    
    async def _on_speech_recognized(self, text: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—É—é —Ä–µ—á—å"""
        logger.info(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ —Ä–µ—á—å: '{text}'")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
        message = {
            "type": "speech_transcription",
            "text": text,
            "timestamp": time.time()
        }
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º")
        await self._broadcast_message(message)
    
    async def _process_ai_question(self, question: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è AI"""
        logger.info(f"ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è AI: '{question}'")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        logger.info(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI...")
        response = await self.ai_responder.get_response(question)
        
        if response:
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI (–¥–ª–∏–Ω–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤)")
            logger.info(f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(self.clients)}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
            message = {
                "type": "ai_response",
                "question": question,
                "answer": response,
                "timestamp": time.time()
            }
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º")
            await self._broadcast_message(message)
        else:
            logger.warning(f"‚ùå AI –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: '{question}'")
    
    async def _broadcast_message(self, message: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        if self.clients:
            message_str = json.dumps(message, ensure_ascii=False)
            logger.info(f"üìª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {len(self.clients)} –∫–ª–∏–µ–Ω—Ç–∞–º: {message['type']}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
            tasks = []
            for client in self.clients.copy():
                tasks.append(self._send_to_client(client, message_str))
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful = sum(1 for r in results if not isinstance(r, Exception))
            failed = len(results) - successful
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} –æ—à–∏–±–æ–∫")
        else:
            logger.warning(f"‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {message['type']}")
    
    async def _send_to_client(self, client: websockets.WebSocketServerProtocol, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            await client.send(message)
            logger.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É: {client.remote_address}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client.remote_address}: {e}")
            self.clients.discard(client)
    
    async def _handle_client_message(self, websocket: websockets.WebSocketServerProtocol, message: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            data = json.loads(message)
            message_type = data.get("type")
            
            if message_type == "start_listening":
                logger.info(f"üé§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è, –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: {type(self.speech_processor).__name__}")
                success = self.speech_processor.start_listening()
                logger.info(f"üé§ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
                status = self.speech_processor.get_status()
                logger.info(f"üîß –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {status}")
                
                response = {
                    "type": "listening_status",
                    "status": "started" if success else "failed"
                }
                await websocket.send(json.dumps(response))
                
            elif message_type == "stop_listening":
                logger.info(f"üîá –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è, –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: {type(self.speech_processor).__name__}")
                self.speech_processor.stop_listening()
                logger.info(f"üîá –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                response = {
                    "type": "listening_status",
                    "status": "stopped"
                }
                await websocket.send(json.dumps(response))
                
            elif message_type == "set_profile":
                profile = data.get("profile", "general")
                self.ai_responder.set_profile(profile)
                response = {
                    "type": "profile_changed",
                    "profile": profile
                }
                await websocket.send(json.dumps(response))
                
            elif message_type == "clear_history":
                self.ai_responder.clear_history()
                response = {
                    "type": "history_cleared"
                }
                await websocket.send(json.dumps(response))
                
            elif message_type == "get_status":
                status = {
                    "type": "status",
                    "speech_processor": self.speech_processor.get_status(),
                    "recorder_info": self.speech_processor.get_recorder_info() if hasattr(self.speech_processor, 'get_recorder_info') else {},
                    "ai_responder": {
                        "profile": self.ai_responder.current_profile,
                        "history_length": len(self.ai_responder.conversation_history)
                    },
                    "clients_connected": len(self.clients)
                }
                await websocket.send(json.dumps(status))
                
            elif message_type == "optimize_performance":
                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if hasattr(self.speech_processor, 'optimize_performance'):
                    result = self.speech_processor.optimize_performance()
                    response = {
                        "type": "performance_optimized",
                        "message": result.get("message", "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"),
                        "status": result.get("status", "success")
                    }
                    await websocket.send(json.dumps(response))
                
            elif message_type == "manual_question":
                # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ AI
                question = data.get("question", "")
                if question:
                    await self._process_ai_question(question)
                    
            elif message_type == "simulate_speech":
                # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å mock –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
                text = data.get("text", "")
                if hasattr(self.speech_processor, 'simulate_speech'):
                    self.speech_processor.simulate_speech(text)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    
    async def _handle_client(self, websocket: websockets.WebSocketServerProtocol, path: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        logger.info(f"{Fore.GREEN}üîó –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {websocket.remote_address}{Style.RESET_ALL}")
        self.clients.add(websocket)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_message = {
                "type": "welcome",
                "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Stealth AI Assistant",
                "version": "1.0.0"
            }
            await websocket.send(json.dumps(welcome_message))
            logger.info(f"{Fore.GREEN}üí¨ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É{Style.RESET_ALL}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            async for message in websocket:
                await self._handle_client_message(websocket, message)
                
        except websockets.exceptions.ConnectionClosed:
            logger.info(f"{Fore.YELLOW}üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {websocket.remote_address}{Style.RESET_ALL}")
        except Exception as e:
            logger.error(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}{Style.RESET_ALL}")
        finally:
            self.clients.discard(websocket)
            logger.info(f"{Fore.CYAN}üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {len(self.clients)}{Style.RESET_ALL}")
    
    def _monitor_security(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        screen_capture_processes = [
            'obs64.exe', 'obs32.exe', 'obs.exe',
            'bandicam.exe', 'fraps.exe', 'camtasia.exe',
            'screenrec.exe', 'hypercam.exe', 'snagit.exe',
            'zoom.exe', 'teams.exe', 'skype.exe'
        ]
        
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
                for proc in psutil.process_iter(['pid', 'name']):
                    try:
                        if proc.info['name'].lower() in [p.lower() for p in screen_capture_processes]:
                            logger.warning(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞: {proc.info['name']}")
                            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
                    except (psutil.NoSuchProcess, psutil.AccessDenied):
                        pass
                
                time.sleep(config.SCREEN_CAPTURE_CHECK_INTERVAL)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
                time.sleep(5)
    
    def start_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        logger.info(f"{Fore.GREEN}üöÄ –ó–∞–ø—É—Å–∫ Stealth AI Assistant{Style.RESET_ALL}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        if not config.PROXYAPI_KEY:
            logger.error("PROXYAPI_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return
        logger.info(f"{Fore.YELLOW}üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º ProxyAPI.ru{Style.RESET_ALL}")
        
        self.is_running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        logger.info(f"{Fore.YELLOW}üîí –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...{Style.RESET_ALL}")
        self.security_monitor = threading.Thread(
            target=self._monitor_security,
            daemon=True
        )
        self.security_monitor.start()
        logger.info(f"{Fore.GREEN}üõ°Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–µ–Ω{Style.RESET_ALL}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
        self.loop = asyncio.new_event_loop()
        asyncio.set_event_loop(self.loop)
        
        try:
            logger.info(f"{Fore.YELLOW}üåê –°–æ–∑–¥–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–∞ {config.WEBSOCKET_HOST}:{config.WEBSOCKET_PORT}...{Style.RESET_ALL}")
            
            self.server = websockets.serve(
                self._handle_client,
                config.WEBSOCKET_HOST,
                config.WEBSOCKET_PORT
            )
            
            logger.info(f"{Fore.GREEN}‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {config.WEBSOCKET_HOST}:{config.WEBSOCKET_PORT}{Style.RESET_ALL}")
            logger.info(f"{Fore.MAGENTA}üî• Kill-switch: {config.KILL_SWITCH_HOTKEY}{Style.RESET_ALL}")
            logger.info(f"{Fore.CYAN}üì° –û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...{Style.RESET_ALL}")
            
            self.loop.run_until_complete(self.server)
            logger.info(f"{Fore.GREEN}üöÄ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!{Style.RESET_ALL}")
            self.loop.run_forever()
            
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        finally:
            self.shutdown()
    
    def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info(f"{Fore.RED}üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Stealth AI Assistant{Style.RESET_ALL}")
        
        self.is_running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
        if self.speech_processor:
            self.speech_processor.stop_listening()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
        if self.clients:
            for client in self.clients.copy():
                try:
                    if self.loop and self.loop.is_running():
                        asyncio.run_coroutine_threadsafe(client.close(), self.loop)
                    else:
                        asyncio.run(client.close())
                except:
                    pass
        
        logger.info("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        if not os.getenv("PROXYAPI_KEY"):
            print(f"{Fore.RED}‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PROXYAPI_KEY{Style.RESET_ALL}")
            print(f"{Fore.YELLOW}–ù–∞–ø—Ä–∏–º–µ—Ä: set PROXYAPI_KEY=sk-yseNQGJXYUnn4YjrnwNJnwW7bsnwFg8K{Style.RESET_ALL}")
            return
        
        assistant = StealthAssistant()
        assistant.start_server()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 