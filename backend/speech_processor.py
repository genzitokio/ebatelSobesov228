import logging
import threading
import time
import queue
from typing import Optional, Callable
from collections import deque
import numpy as np

try:
    from RealtimeSTT import AudioToTextRecorder
except ImportError:
    print("RealtimeSTT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pip install RealtimeSTT")
    AudioToTextRecorder = None

from config import config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SpeechProcessor:
    def __init__(self):
        self.recorder = None
        self.is_listening = False
        self.listening_thread = None
        self.text_callback: Optional[Callable[[str], None]] = None
        self.should_stop = False
        
        self._setup_recorder()
    
    def _setup_recorder(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–µ–∫–æ—Ä–¥–µ—Ä –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏"""
        if AudioToTextRecorder is None:
            logger.error("RealtimeSTT –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        try:
            # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RealtimeSTT
            self.recorder = AudioToTextRecorder(
                model=config.WHISPER_MODEL,
                language=config.WHISPER_LANGUAGE,
                enable_realtime_transcription=True,
                use_microphone=True,
                # –ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏ –∏ –∑–∞–¥–µ—Ä–∂–µ–∫
                min_length_of_recording=config.RTT_MIN_RECORDING_LENGTH,
                min_gap_between_recordings=config.RTT_MIN_GAP_BETWEEN_RECORDINGS,
                post_speech_silence_duration=config.RTT_POST_SPEECH_SILENCE,
                # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                silero_sensitivity=config.RTT_SILERO_SENSITIVITY,
                webrtc_sensitivity=config.RTT_WEBRTC_SENSITIVITY,
                silero_use_onnx=False
            )
            
            logger.info("–†–µ–∫–æ—Ä–¥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã RealtimeSTT:")
            logger.info(f"  - –ú–æ–¥–µ–ª—å: {config.WHISPER_MODEL}")
            logger.info(f"  - –Ø–∑—ã–∫: {config.WHISPER_LANGUAGE}")
            logger.info(f"  - –ú–∏–Ω. –¥–ª–∏–Ω–∞ –∑–∞–ø–∏—Å–∏: {config.RTT_MIN_RECORDING_LENGTH}—Å")
            logger.info(f"  - –ú–∏–Ω. –∏–Ω—Ç–µ—Ä–≤–∞–ª: {config.RTT_MIN_GAP_BETWEEN_RECORDINGS}—Å")
            logger.info(f"  - –¢–∏—à–∏–Ω–∞ –ø–æ—Å–ª–µ —Ä–µ—á–∏: {config.RTT_POST_SPEECH_SILENCE}—Å")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–µ–∫–æ—Ä–¥–µ—Ä–∞: {e}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º mock –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
            logger.info("–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ mock –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä")
            self.recorder = "mock"
    
    def _text_detected_callback(self, text: str):
        """Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        if text and text.strip():
            logger.info(f"üó£Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: '{text}'")
            if self.text_callback:
                logger.info(f"üìû –í—ã–∑—ã–≤–∞–µ–º callback —Å —Ç–µ–∫—Å—Ç–æ–º: '{text}'")
                self.text_callback(text)
            else:
                logger.warning("‚ùå Callback –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Ç–µ–∫—Å—Ç –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
        else:
            logger.debug(f"ü§ê –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç: '{text}'")
    
    def _listening_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        logger.info("–ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è")
        
        while not self.should_stop:
            try:
                if self.recorder and self.recorder != "mock":
                    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RealtimeSTT
                    self.recorder.text(self._text_detected_callback)
                else:
                    # Mock —Ä–µ–∂–∏–º - –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º
                    time.sleep(0.1)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
                time.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                
        logger.info("–¶–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def set_text_callback(self, callback: Callable[[str], None]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        self.text_callback = callback
        logger.info("Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def start_listening(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ"""
        if not self.recorder:
            logger.error("–†–µ–∫–æ—Ä–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        if self.is_listening:
            logger.warning("–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ")
            return True
        
        if self.recorder == "mock":
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è mock —Ä–µ–∂–∏–º (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ)")
            self.is_listening = True
            return True
        
        try:
            self.should_stop = False
            self.is_listening = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.listening_thread = threading.Thread(
                target=self._listening_loop,
                daemon=True,
                name="SpeechListening"
            )
            self.listening_thread.start()
            
            logger.info("‚úÖ –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
            self.is_listening = False
            return False
    
    def stop_listening(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ"""
        if not self.is_listening:
            logger.info("–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return
            
        logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ...")
        
        self.should_stop = True
        self.is_listening = False
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
        if self.listening_thread and self.listening_thread.is_alive():
            self.listening_thread.join(timeout=2)
            if self.listening_thread.is_alive():
                logger.warning("–ü–æ—Ç–æ–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
        
        logger.info("üõë –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    def is_recording_active(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ"""
        return self.is_listening
    
    def get_status(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Ä–µ—á–∏"""
        return {
            "is_listening": self.is_listening,
            "has_recorder": self.recorder is not None and self.recorder != "mock",
            "recorder_type": "mock" if self.recorder == "mock" else "realtime_stt",
            "thread_alive": self.listening_thread.is_alive() if self.listening_thread else False
        }

    def simulate_speech(self, text: str):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info(f"üé≠ –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ—á–∏: '{text}'")
        if self.text_callback:
            self.text_callback(text)
        else:
            logger.warning("Callback –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏")

    def get_recorder_info(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∫–æ—Ä–¥–µ—Ä–µ"""
        if self.recorder == "mock":
            return {"type": "mock", "status": "active"}
        
        if not self.recorder:
            return {"type": "none", "status": "not_initialized"}
            
        try:
            info = {
                "type": "realtime_stt",
                "status": "listening" if self.is_listening else "ready",
                "model": config.WHISPER_MODEL,
                "language": config.WHISPER_LANGUAGE
            }
            return info
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∫–æ—Ä–¥–µ—Ä–µ: {e}")
            return {"type": "realtime_stt", "status": "error", "error": str(e)}

    def optimize_performance(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å RealtimeSTT"""
        logger.info("‚ö° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        if self.recorder == "mock":
            logger.info("Mock —Ä–µ–∂–∏–º - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return {"status": "success", "message": "Mock —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω"}
        
        if not self.recorder:
            logger.error("–†–µ–∫–æ—Ä–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return {"status": "error", "message": "–†–µ–∫–æ—Ä–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
        
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            was_listening = self.is_listening
            if was_listening:
                self.stop_listening()
                time.sleep(1)
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ—Ä–¥–µ—Ä —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            self._setup_recorder()
            
            # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ
            if was_listening:
                time.sleep(1)
                self.start_listening()
            
            logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return {"status": "success", "message": "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}"}

    def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã SpeechProcessor...")
        self.stop_listening()
        
        if self.recorder and self.recorder != "mock":
            try:
                # –£ RealtimeSTT –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ—Ç–æ–¥ shutdown
                if hasattr(self.recorder, 'shutdown'):
                    self.recorder.shutdown()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–∫–æ—Ä–¥–µ—Ä–∞: {e}")
        
        logger.info("SpeechProcessor –∑–∞–≤–µ—Ä—à–µ–Ω")

# –§–µ–π–∫–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∞—É–¥–∏–æ
class MockSpeechProcessor:
    def __init__(self):
        self.is_listening = False
        self.text_callback = None
        
    def set_text_callback(self, callback):
        self.text_callback = callback
        
    def start_listening(self):
        self.is_listening = True
        logger.info("Mock: –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ")
        return True
        
    def stop_listening(self):
        self.is_listening = False
        logger.info("Mock: –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
    def simulate_speech(self, text: str):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏"""
        if self.text_callback:
            self.text_callback(text)
            
    def get_status(self):
        return {
            "is_listening": self.is_listening,
            "is_recording": self.is_listening,
            "mock": True
        } 