// –ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å Electron - –ø—Ä–æ—Å—Ç–∞—è JavaScript –≤–µ—Ä—Å–∏—è
const {
  app,
  BrowserWindow,
  globalShortcut,
  ipcMain,
  dialog,
} = require("electron");
const path = require("path");
const WebSocket = require("ws");

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const devConfig = {
  isDev: true,
  showDevTools: true,
  enableLogging: true,
  mockSpeechProcessor: false,
};

class StealthAssistantApp {
  constructor() {
    this.mainWindow = null;
    this.websocket = null;
    this.isVisible = false;
    this.isListening = false;
    this.connectionStatus = "disconnected";
    this.settings = {
      alwaysOnTop: true,
      transparent: true,
      position: { x: 100, y: 100 },
      size: { width: 800, height: 600 },
      profile: "general",
      autoHideDelay: 10000,
    };
    this.reconnectTimer = null;
    this.hideTimer = null;
    this.init();
  }

  init() {
    // –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.whenReady().then(() => {
      this.createWindow();
      this.setupGlobalShortcuts();
      this.connectToBackend();
      this.setupIPC();

      // –î–ª—è macOS
      app.on("activate", () => {
        if (BrowserWindow.getAllWindows().length === 0) {
          this.createWindow();
        }
      });
    });

    // –í—Å–µ –æ–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã
    app.on("window-all-closed", () => {
      if (process.platform !== "darwin") {
        app.quit();
      }
    });

    // –ü–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
    app.on("before-quit", () => {
      this.cleanup();
    });
  }

  createWindow() {
    this.mainWindow = new BrowserWindow({
      width: this.settings.size.width,
      height: this.settings.size.height,
      x: this.settings.position.x,
      y: this.settings.position.y,

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      alwaysOnTop: devConfig.isDev ? false : this.settings.alwaysOnTop,
      transparent: devConfig.isDev ? false : this.settings.transparent,
      frame: devConfig.isDev ? true : false,
      skipTaskbar: devConfig.isDev ? false : true,

      // –í–∫–ª—é—á–∞–µ–º node –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ require
      webPreferences: {
        nodeIntegration: true,
        contextIsolation: false,
        backgroundThrottling: false,
      },

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      show: true,
      focusable: true,
      minimizable: true,
      maximizable: true,
      resizable: true,
      minWidth: 400,
      minHeight: 300,

      // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
      title: devConfig.isDev
        ? "Stealth AI Assistant - DEV"
        : "System Background Process",
    });

    // –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞
    this.mainWindow.setContentProtection(true);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º HTML
    this.mainWindow.loadFile(path.join(__dirname, "index.html"));

    // –û—Ç–∫–ª—é—á–∞–µ–º –º–µ–Ω—é
    this.mainWindow.setMenuBarVisibility(false);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–∫–Ω–∞
    this.mainWindow.on("closed", () => {
      this.mainWindow = null;
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º DevTools –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (devConfig.isDev && devConfig.showDevTools) {
      this.mainWindow.webContents.openDevTools();
      this.mainWindow.show();
      this.isVisible = true;
    }

    this.log("üñ•Ô∏è  Stealth –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ");
  }

  setupGlobalShortcuts() {
    const shortcuts = [
      {
        key: "Ctrl+Shift+H",
        action: () => this.toggleVisibility(),
        desc: "–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å",
      },
      {
        key: "Ctrl+Shift+F12",
        action: () => this.emergencyHide(),
        desc: "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ",
      },
      {
        key: "Ctrl+Shift+1",
        action: () => this.changeProfile("technical"),
        desc: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é",
      },
      {
        key: "Ctrl+Shift+2",
        action: () => this.changeProfile("hr"),
        desc: "HR –∏–Ω—Ç–µ—Ä–≤—å—é",
      },
      {
        key: "Ctrl+Shift+3",
        action: () => this.changeProfile("sales"),
        desc: "–ü—Ä–æ–¥–∞–∂–∏",
      },
      {
        key: "Ctrl+Shift+4",
        action: () => this.changeProfile("general"),
        desc: "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
      },
      {
        key: "Ctrl+Shift+C",
        action: () => this.clearHistory(),
        desc: "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
      },
    ];

    shortcuts.forEach(({ key, action, desc }) => {
      const success = globalShortcut.register(key, action);
      if (success) {
        this.log(`‚å®Ô∏è  ${key} - ${desc}`);
      } else {
        this.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å: ${key}`);
      }
    });
  }

  connectToBackend() {
    const wsUrl = "ws://127.0.0.1:8765";
    this.log(`üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É: ${wsUrl}`);

    try {
      this.websocket = new WebSocket(wsUrl);

      this.websocket.on("open", () => {
        this.log("üéâ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±—ç–∫–µ–Ω–¥—É!");
        this.connectionStatus = "connected";
        this.sendToRenderer("backend-connected", {});
        this.sendToRenderer("connection-status", { status: "connected" });

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if (this.reconnectTimer) {
          clearTimeout(this.reconnectTimer);
          this.reconnectTimer = null;
        }
      });

      this.websocket.on("message", (data) => {
        try {
          const message = JSON.parse(data.toString());
          this.handleBackendMessage(message);
        } catch (error) {
          this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
        }
      });

      this.websocket.on("close", () => {
        this.log("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±—ç–∫–µ–Ω–¥–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ");
        this.connectionStatus = "disconnected";
        this.sendToRenderer("backend-disconnected", {});
        this.sendToRenderer("connection-status", { status: "disconnected" });
        this.scheduleReconnect();
      });

      this.websocket.on("error", (error) => {
        this.log(`‚ùå –û—à–∏–±–∫–∞ WebSocket: ${error.message}`);
        this.connectionStatus = "error";
        this.sendToRenderer("connection-status", { status: "error" });
        this.scheduleReconnect();
      });
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket: ${error.message}`);
      this.scheduleReconnect();
    }
  }

  scheduleReconnect() {
    if (this.reconnectTimer) return;

    this.reconnectTimer = setTimeout(() => {
      this.log("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");
      this.connectToBackend();
    }, 5000);
  }

  handleBackendMessage(message) {
    this.log(`üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±—ç–∫–µ–Ω–¥–∞: ${JSON.stringify(message)}`);

    switch (message.type) {
      case "welcome":
        this.log(`üéâ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±—ç–∫–µ–Ω–¥—É: ${message.message}`);
        break;
      case "ai_response":
        // Backend –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç: { type: "ai_response", question: "...", answer: "...", timestamp: ... }
        this.log(
          `ü§ñ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç AI: –≤–æ–ø—Ä–æ—Å="${message.question}", –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π ${
            message.answer?.length || 0
          } —Å–∏–º–≤–æ–ª–æ–≤`
        );
        this.sendToRenderer("ai-response", {
          question: message.question,
          answer: message.answer,
          timestamp: message.timestamp,
        });
        this.log(`üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ renderer: ai-response`);
        break;
      case "speech_transcription":
        // Backend –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç: { type: "speech_transcription", text: "...", timestamp: ... }
        this.log(`üé§ –ü–æ–ª—É—á–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: "${message.text}"`);
        this.sendToRenderer("speech-transcription", {
          text: message.text,
          timestamp: message.timestamp,
        });
        this.log(`üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ renderer: speech-transcription`);
        break;
      case "listening_status":
        // Backend –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç: { type: "listening_status", status: "started" }
        this.isListening = message.status === "started";
        this.sendToRenderer("listening-status", {
          status: message.status,
        });
        break;
      case "profile_changed":
        // Backend –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç: { type: "profile_changed", profile: "technical" }
        this.sendToRenderer("profile-changed", {
          profile: message.profile,
        });
        break;
      case "system_status":
        // Backend –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç: { type: "status", speech_processor: {...}, ... }
        this.sendToRenderer("status-update", {
          backend: true,
          websocket: true,
          speech: message.speech_processor
            ? message.speech_processor.is_listening
            : false,
          ai: true,
        });
        break;
      case "history_cleared":
        this.log("üìù –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞");
        this.sendToRenderer("history-cleared", {});
        break;
      case "performance_optimized":
        this.log("‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
        this.sendToRenderer("performance-optimized", {
          message: message.message || "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
        });
        break;
      default:
        this.log(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message.type}`);
    }
  }

  sendToRenderer(channel, data) {
    if (this.mainWindow && this.mainWindow.webContents) {
      this.mainWindow.webContents.send(channel, data);
    }
  }

  sendToBackend(message) {
    this.log(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ backend: ${JSON.stringify(message)}`);
    if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
      this.websocket.send(JSON.stringify(message));
      this.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ WebSocket");
    } else {
      this.log("‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω");
    }
  }

  setupIPC() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ IPC –æ—Ç renderer –ø—Ä–æ—Ü–µ—Å—Å–∞
    ipcMain.handle("toggle-visibility", () => {
      this.log("üîÑ IPC: toggle-visibility");
      this.toggleVisibility();
    });

    ipcMain.handle("emergency-hide", () => {
      this.log("üö® IPC: emergency-hide");
      this.emergencyHide();
    });

    ipcMain.handle("clear-history", () => {
      this.log("üóëÔ∏è IPC: clear-history");
      this.clearHistory();
    });

    ipcMain.handle("change-profile", (event, profile) => {
      this.log(`üîÑ IPC: change-profile to ${profile}`);
      this.changeProfile(profile);
    });

    ipcMain.handle("send-question", (event, question) => {
      this.log(`üì§ IPC: send-question - "${question}"`);
      this.sendToBackend({ type: "manual_question", question: question });
    });

    ipcMain.handle("toggle-listening", () => {
      this.log(
        `üé§ IPC: toggle-listening (—Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${this.isListening})`
      );
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –º–µ–∂–¥—É start –∏ stop
      if (this.isListening) {
        this.log("üîá –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è");
        this.sendToBackend({ type: "stop_listening" });
        // –ù–ï –∏–∑–º–µ–Ω—è–µ–º this.isListening –∑–¥–µ—Å—å - –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç backend
      } else {
        this.log("üé§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è");
        this.sendToBackend({ type: "start_listening" });
        // –ù–ï –∏–∑–º–µ–Ω—è–µ–º this.isListening –∑–¥–µ—Å—å - –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç backend
      }
    });

    ipcMain.handle("simulate-speech", (event, text) => {
      this.log(`üé≠ IPC: simulate-speech - "${text}"`);
      this.sendToBackend({ type: "simulate_speech", text: text });
    });

    ipcMain.handle("optimize-performance", () => {
      this.log("‚ö° IPC: optimize-performance");
      this.sendToBackend({ type: "optimize_performance" });
    });
  }

  toggleVisibility() {
    if (this.isVisible) {
      this.hide();
    } else {
      this.show();
    }
  }

  show() {
    if (this.mainWindow) {
      this.mainWindow.show();
      this.mainWindow.focus();
      this.isVisible = true;
    }
  }

  hide() {
    if (this.mainWindow) {
      this.mainWindow.hide();
      this.isVisible = false;
    }
  }

  emergencyHide() {
    this.hide();
    this.log("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ");
  }

  changeProfile(profile) {
    this.settings.profile = profile;
    this.sendToBackend({ type: "set_profile", profile: profile });
    this.log(`üîÑ –ü—Ä–æ—Ñ–∏–ª—å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${profile}`);
  }

  clearHistory() {
    this.sendToBackend({ type: "clear_history" });
    this.log("üóëÔ∏è –ó–∞–ø—Ä–æ—Å –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
  }

  cleanup() {
    if (this.websocket) {
      this.websocket.close();
    }
    if (this.reconnectTimer) {
      clearTimeout(this.reconnectTimer);
    }
    if (this.hideTimer) {
      clearTimeout(this.hideTimer);
    }
    globalShortcut.unregisterAll();
  }

  log(message) {
    if (devConfig.enableLogging) {
      const timestamp = new Date().toLocaleTimeString();
      console.log(`[${timestamp}] ${message}`);
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
console.log("üöÄ Stealth AI Assistant –∑–∞–ø—É—â–µ–Ω (JavaScript)");
const stealthApp = new StealthAssistantApp();
